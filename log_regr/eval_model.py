import sklearn
import sklearn.metrics
import sys
import numpy as np
import scipy

exec(open("data/X_ortho.dat").read())

import sklearn.linear_model
model = sklearn.linear_model.LogisticRegression(fit_intercept=False)
model.fit(X, y)

print("Ideal (sklearn clear):")
print("\troc auc score:  {}".format(sklearn.metrics.roc_auc_score(y, model.predict_proba(X)[:,1])))
print("\tlog loss score: {}".format(sklearn.metrics.log_loss(y, model.predict_proba(X)[:,1])))
print("\taccuracy score: {}".format(sklearn.metrics.accuracy_score(y, model.predict(X))))


# from plaintext appliation 1st iteration (no sigmoid)
# X_beta = np.array([0.590202,0.674093,-0.5841,-1.11051,-0.479983,0.0543181,-0.236735,-0.743701,-1.39542,-0.969466,-0.0388007,0.00467557,-0.295421,-0.193288,-0.259062,-0.535699,-0.0977712,-0.151105,-0.567534,0.0796331,-0.236735,0.106238,-0.391978,-0.610576,0.393122,-0.571395,-0.975327,0.561191,-0.281795,0.0499594,-0.297903,0.492949,0.874683,-0.886342,-0.477886,-1.28667,-0.961589,-0.37759,-0.407705,0.424913,-0.885385,1.58011,0.0567157,-0.517093,-0.0125976,-0.759038,-0.191918,-0.0785975,-0.456459,-1.17229,-0.557604,-1.43222,0.0975692,0.389997,-0.977154,0.246778,-0.358978,0.0266809,-0.803463,-0.314003,-0.243223,-0.26972,-0.455587,-0.0360131,-1.02198,-0.416309,0.427058,-0.0453244,-0.590353,-0.406745,0.247858,-0.67158,0.343869,-0.613609,-1.01036,-0.117169,-0.0159763,-0.381457,0.0776168,0.629005,1.06535,-0.789668,-0.119841,0.699063,0.809411,-0.0857199,0.139607,-0.631871,-0.414047,-0.376806,0.0626495,-0.287656,-0.946416,-0.675303,0.116602,-0.678774,-0.0855388,-0.405106,-0.0184144,-0.814336,-0.784578,-0.587005,-0.899513,-0.31751,-0.080132,-0.338736,-0.605668,-0.0948262,-0.0718006,0.47639,0.769079,-0.284265,-1.00982,0.5144,-0.888934,0.301719,-0.373315,0.464314,-0.00949297,-0.0228008,-0.548409,0.166084,-0.41334,0.287479,0.851176,-1.08719,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735,-0.236735])
# from plaintext application 7th iteration
X_beta = np.array([0.637458,0.726372,-0.630282,-1.19857,-0.507474,0.0624393,-0.244866,-0.805456,-1.50997,-1.04373,-0.0323628,0.0211533,-0.290848,-0.198878,-0.276925,-0.568657,-0.0950827,-0.165898,-0.600204,0.0968222,-0.244866,0.143668,-0.421331,-0.660403,0.452814,-0.58852,-1.05491,0.607139,-0.294773,0.0724442,-0.323364,0.545331,0.971204,-0.957429,-0.508667,-1.40383,-1.03413,-0.39092,-0.424287,0.476096,-0.954264,1.76222,0.0714326,-0.547053,-0.0112499,-0.823361,-0.202493,-0.081967,-0.478843,-1.26351,-0.600064,-1.54095,0.123285,0.426335,-1.05278,0.28876,-0.385973,0.0365792,-0.86437,-0.329934,-0.249269,-0.279487,-0.484136,-0.0232537,-1.09623,-0.436307,0.491241,-0.0375998,-0.628233,-0.428113,0.284114,-0.713568,0.396579,-0.662279,-1.08878,-0.127471,0.0100892,-0.394908,0.0984006,0.691303,1.18291,-0.850903,-0.118871,0.78397,0.902909,-0.0729017,0.163981,-0.665431,-0.445119,-0.395808,0.0654512,-0.30595,-1.00861,-0.710681,0.137125,-0.713947,-0.0884973,-0.415728,-0.0141615,-0.88325,-0.850414,-0.615433,-0.960091,-0.314733,-0.0707332,-0.360056,-0.644318,-0.094674,-0.0677213,0.530924,0.875969,-0.297194,-1.07077,0.583324,-0.950316,0.331183,-0.392447,0.514391,6.88904e-05,-0.0203987,-0.56176,0.194103,-0.442794,0.300655,0.934596,-1.18117,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866])
print("plaintext binary (clear):")
print("\troc auc score:  {}".format(sklearn.metrics.roc_auc_score(y, scipy.special.expit(X_beta))))
print("\tlog loss score: {}".format(sklearn.metrics.log_loss(y, scipy.special.expit(X_beta))))
print("\taccuracy score: {}".format(sklearn.metrics.accuracy_score(y, scipy.special.expit(X_beta) >= 0.5)))


while True:
    line = sys.stdin.readline()
    if not line: break

    line = line.split()
    filename = line[0]
    X_beta_elems = line[1:]

    # beta = np.array(list(map(float, line.split())))
    # print(beta)
    # X_beta = np.matmul(X,beta)

    X_beta = np.array(list(map(float, X_beta_elems)))
    print("Input X_beta {}".format(filename))
    print("\troc auc score:  {}".format(sklearn.metrics.roc_auc_score(y, scipy.special.expit(X_beta))))
    print("\tlog loss score: {}".format(sklearn.metrics.log_loss(y, scipy.special.expit(X_beta))))
    print("\taccuracy score: {}".format(sklearn.metrics.accuracy_score(y, scipy.special.expit(X_beta) >= 0.5)))
