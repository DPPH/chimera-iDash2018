import sklearn
import sklearn.metrics
import sys
import numpy as np
import scipy

line = sys.stdin.readline()


# beta = np.array(list(map(float, line.split())))
exec(open("data/X_ortho.dat").read())
# print(beta)
# X_beta = np.matmul(X,beta)

X_beta = np.array(list(map(float, line.split())))
print("Input X_beta")
print("\troc auc score:  {}".format(sklearn.metrics.roc_auc_score(y, scipy.special.expit(X_beta))))
print("\taccuracy score: {}".format(sklearn.metrics.accuracy_score(y, scipy.special.expit(X_beta) >= 0.5)))

import sklearn.linear_model
model = sklearn.linear_model.LogisticRegression(fit_intercept=False)
model.fit(X, y)

print("Ideal (learn in clear):")
print("\troc auc score:  {}".format(sklearn.metrics.roc_auc_score(y, model.predict_proba(X)[:,1])))
print("\taccuracy score: {}".format(sklearn.metrics.accuracy_score(y, model.predict(X))))


# from plaintext application
X_beta = np.array([0.637458,0.726372,-0.630282,-1.19857,-0.507474,0.0624393,-0.244866,-0.805456,-1.50997,-1.04373,-0.0323628,0.0211533,-0.290848,-0.198878,-0.276925,-0.568657,-0.0950827,-0.165898,-0.600204,0.0968222,-0.244866,0.143668,-0.421331,-0.660403,0.452814,-0.58852,-1.05491,0.607139,-0.294773,0.0724442,-0.323364,0.545331,0.971204,-0.957429,-0.508667,-1.40383,-1.03413,-0.39092,-0.424287,0.476096,-0.954264,1.76222,0.0714326,-0.547053,-0.0112499,-0.823361,-0.202493,-0.081967,-0.478843,-1.26351,-0.600064,-1.54095,0.123285,0.426335,-1.05278,0.28876,-0.385973,0.0365792,-0.86437,-0.329934,-0.249269,-0.279487,-0.484136,-0.0232537,-1.09623,-0.436307,0.491241,-0.0375998,-0.628233,-0.428113,0.284114,-0.713568,0.396579,-0.662279,-1.08878,-0.127471,0.0100892,-0.394908,0.0984006,0.691303,1.18291,-0.850903,-0.118871,0.78397,0.902909,-0.0729017,0.163981,-0.665431,-0.445119,-0.395808,0.0654512,-0.30595,-1.00861,-0.710681,0.137125,-0.713947,-0.0884973,-0.415728,-0.0141615,-0.88325,-0.850414,-0.615433,-0.960091,-0.314733,-0.0707332,-0.360056,-0.644318,-0.094674,-0.0677213,0.530924,0.875969,-0.297194,-1.07077,0.583324,-0.950316,0.331183,-0.392447,0.514391,6.88904e-05,-0.0203987,-0.56176,0.194103,-0.442794,0.300655,0.934596,-1.18117,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866,-0.244866])
print("plaintext binary (learn in clear):")
print("\troc auc score:  {}".format(sklearn.metrics.roc_auc_score(y, scipy.special.expit(X_beta))))
print("\taccuracy score: {}".format(sklearn.metrics.accuracy_score(y, scipy.special.expit(X_beta) >= 0.5)))
